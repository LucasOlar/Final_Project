knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(devtools)
devtools::install_github("SMAC-Group/idar")
library(idar)
library(dplyr)
library(ggplot2)
<<<<<<< Updated upstream
library(gganimate)
library(viridis)
library(magick)
colnames(data_covid_europe_spatial)
str(data_covid_europe_spatial)
data_total <- data_covid_europe_spatial
data = data.frame(data_total$admin, data_total$iso_alpha_3 ,data_total$date,data_total$confirmed_per_pop_ma, data_total$confirmed_per_pop)
data_ch = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.date, data_total.confirmed_per_pop_ma, data_total.confirmed_per_pop)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop_ma)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Second Graph with Confirmed per pop (i.e. the original variable before smoothing the data) :
ch_plot = ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
ch_plot
data_neighbours_1 = ""
data_neighbours_1 = data %>%
filter(data_total.admin == "Germany") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_2 = data %>%
filter(data_total.admin == "Italy") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_3 = data %>%
filter(data_total.admin == "Austria") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_4 = data %>%
filter(data_total.admin == "France") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_5 = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours <- rbind(data_neighbours_1, data_neighbours_2, data_neighbours_3, data_neighbours_4, data_neighbours_5)
data_neighbours = data_neighbours %>% rename(Country = data_total.iso_alpha_3)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_plot = ggplot(data_neighbours, aes(x = data_total.date, y = data_total.confirmed_per_pop_ma, color = Country)) +
geom_line(size = 1) +
labs(title = 'COVID-19 Confirmed cases divided per the population',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population' , ) +
theme_minimal()
eu_plot
eu_anim = eu_plot + geom_point() + transition_reveal(data_total.date)
num1=int(input("Enter num1:"))
num2=int(input("Enter num2:"))
action = str(input("Choose action : Add(a), Sub(s), Mult(m), Div(d) ->"))
print("The result is ",end="")
if action == "a":
print(num1+num2)
elif action == "s":
print(num1-num2)
elif action == "m":
print(num1*num2)
else:
print(num1/num2)
num1=int(input("Enter num1:"))
num2=int(input("Enter num2:"))
action = str(input("Choose action : Add(a), Sub(s), Mult(m), Div(d) ->"))
print("The result is ",end="")
if action == "a":
print(num1+num2)
if action == "s":
print(num1-num2)
if action == "m":
print(num1*num2)
else:
print(num1/num2)
library(shiny); runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
library(shiny); runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
?sort
library(shiny); runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
=======
library(ggpubr)
library(tibble)
rm(list = ls())
#We want to create a function that filters based on : 2 genres, vote_average, popularity, 2 release_date, runtime, original language, spoken languages
# colnames(movies_df)
#Show all the possible original languages
# list_languages <- movies_df[!duplicated(movies_df$original_language), ]
# list_languages = list_languages %>%
#   select(original_language)
# unique(list_languages$original_language)
#Show all the possible genres of movies
# list_genres <- unlist(strsplit(movies_df$genres,","))
# list_genres <- list_genres[!duplicated(list_genres)]
# print(list_genres)
#Show all the possible spoken languages
# list_spoken_languages <- unlist(strsplit(movies_df$spoken_languages,","))
# list_spoken_languages <- list_spoken_languages[!duplicated(list_spoken_languages)]
# print(list_spoken_languages)
data_filter = function(genre_1, genre_2, vote_average_input, popularity_input, date_before,
date_after, runtime_input, original_language_input, spoken_languages_input){
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(spoken_languages_input == "All"){
spoken_languages_input <- ""
}
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_average_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before) %>%
filter(release_date >= date_after) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language)) %>%
filter(grepl(pattern = spoken_languages_input, x = spoken_languages))
return(movies_recommendation)
}
data_filter(
genre_1 = "Action",
genre_2 = "Comedy",
vote_average_input = 3,
popularity_input = 39,
date_before = as.Date(c("2017-06-22")),
date_after = as.Date(c("2007-06-22")),
runtime_input = 200,
original_language_input = "en",
spoken_languages_input = "Español")
data_recommend_new <- data_filter(
genre_1 = "Action",
genre_2 = "Comedy",
vote_average_input = 3,
popularity_input = 39,
date_before = as.Date(c("2017-06-22")),
date_after = as.Date(c("2007-06-22")),
runtime_input = 200,
original_language_input = "en",
spoken_languages_input = "Español")
View(data_recommend_new)
runApp()
shiny::runApp()
if(interactive()){
ui <- fluidPage(
# Application title
titlePanel("EL PELIROSTER"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("genre_1", "GENRES 1", c("All", "Action", "Adventure", "Fantasy", "Science Fiction", "Crime", "Drama", "Thriller",
"Animation", "Family", "Western", "Comedy", "Romance", "Horror", "Mystery", "History", "War",
"Music", "Documentary", "Foreign", "TV Movie"), selected = NULL, multiple = FALSE, width = NULL),
selectInput("genre_2", "GENRES 2", c("All", "Action", "Adventure", "Fantasy", "Science Fiction", "Crime", "Drama", "Thriller",
"Animation", "Family", "Western", "Comedy", "Romance", "Horror", "Mystery", "History", "War",
"Music", "Documentary", "Foreign", "TV Movie"), selected = NULL, multiple = FALSE, width = NULL),
sliderInput("vote_average", "AVERAGE RATING", min = 0, max = 10, value = 5),
sliderInput("popularity", "POPULARITY", min = 0, max = 150, value = 75),
sliderInput("runtime", "MAXIMUM LENGTH (MINUTES)", min = 0, max = 340, value = 170),
dateInput("date_before", "FILMS BEFORE", value = "2017-02-03", format = "dd-mm-yyyy"),
dateInput("date_after", "FILMS AFTER", value = "1916-09-04", format = "dd-mm-yyyy"),
selectInput("original_language", "ORIGINAL LANGUAGE",
c("All", "English" = "en", "Japanese" = "ja", "French" = "fr", "Chinese" = "zh", "Spanish" = "es", "German" = "de",
"Hindi" = "hi", "Russian" = "ru", "Korean" = "ko", "Telugu" = "te", "Catalan" = "cn", "Italian" = "it", "Dutch" = "nl",
"Tamil" = "ta", "Swedish" = "sv", "Thai" = "th", "Danish" = "da", "Hungarian" = "hu", "Czech" = "cs", "Portuguese" = "pt",
"Icelandic" = "is", "Turkish" = "tr", "Norwegian BokmÃ¥l" = "nb", "Afrikaans" = "af", "Polish" = "pl", "Hebrew" = "he",
"Arabic" = "ar", "Vietnamese" = "vi", "Kyrgyz" = "ky", "Indonesian" = "id", "Romanian" = "ro", "Persian" = "fa",
"Norwegian" = "no", "Slovenian" = "sl", "Pashto"= "ps", "Greek" = "el"
), selected = NULL, multiple = FALSE, width = NULL),
selectInput("spoken_languages", "DUBBED LANGUAGE",
c("All", "English", "EspaÃ±ol", "FranÃ§ais", "Italiano", "Deutsch", "TÃ¼rkÃ§e", "ÎµÎ»Î»Î·Î½Î¹ÎºÎ¬",
"æ®éè¯", "à¸ à¸²à¸©à¸²à¹à¸à¸¢", "Ãslenska",  "PÑÑÑÐºÐ¸Ð¹", "svenska", "RomÃ¢nÄ", "æ¥æ¬èª", "Latin",
"à¤¹à¤¿à¤¨à¥à¤¦à¥", "PortuguÃªs", "ÙØ§Ø±Ø³Û" , "Ø§Ø±Ø¯Ù"  ,"Ø§ÙØ¹Ø±Ø¨ÙØ©" , "ÄeskÃ½", "å¹¿å·è¯ / å»£å·è©±",
"íêµ­ì´/ì¡°ì ë§" ,"Norsk", "à®¤à®®à®¿à®´à¯", "×¢Ö´×Ö°×¨Ö´××ª", "Dansk", "Nederlands", "Afrikaans", "Gaeilge",
"Somali", "suomi", "Kiswahili", "Ð±ÑÐ»Ð³Ð°ÑÑÐºÐ¸ ÐµÐ·Ð¸Ðº", "Tiáº¿ng Viá»t", "Magyar", "Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ¸Ð¹",
"Esperanto" , "Polski", "à¨ªà©°à¨à¨¾à¨¬à©", "Eesti","shqip","Srpski","Bosanski","Hrvatski","SlovenÄina","ÒÐ°Ð·Ð°Ò",
"à°¤à±à°²à±à°à±", "Cymraeg","Wolof","isiZulu", "Ù¾ÚØªÙ", "No Language",  "Galego","á¥áá áá£áá"  ,
"à¦¬à¦¾à¦à¦²à¦¾" , "CatalÃ ", "Bahasa indonesia" , "Bamanankan" ,"SlovenÅ¡Äina"
), selected = NULL, multiple = FALSE, width = NULL),
actionButton("compute", "Confirm Criteria", icon = icon("film"), class = "btn-success")
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("RECOMMENDATIONS", tableOutput("peli")),
tabPanel("RANDOMIZER"),
tabPanel("PELIRANDOM")
),
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#Use data_filter function from functions_final_project.R to filter with criteria
data_recommend <- eventReactive(input$compute,{
data_filter(
genre_1 = input$genre_1,
genre_2 = input$genre_2,
vote_average_input = input$vote_average,
popularity_input = input$popularity,
date_before = input$date_before,
date_after = input$date_after,
runtime_input = input$runtime,
original_language_input = input$original_language,
spoken_languages_input = input$spoken_languages)
})
#Prints out table (temporary)
output$peli <- renderTable({
choose_movie(data_recommend())
})
observeEvent(input$compute, {
#Remove old buttons
removeUI(selector = "div:has(>> #genre_1)")
removeUI(selector = "div:has(>> #genre_2)")
removeUI(selector = "div:has(> #vote_average)")
removeUI(selector = "div:has(> #popularity)")
removeUI(selector = "div:has(>> #date_before)")
removeUI(selector = "div:has(>> #date_after)")
removeUI(selector = "div:has(> #runtime)")
removeUI(selector = "div:has(>> #original_language)")
removeUI(selector = "div:has(>> #spoken_languages)")
#Change Compute button into accept button
updateActionButton(session, "compute", label = "ANOTHER ONE", icon = icon("recycle"))
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
removeUI(selector = "div:has(>> #spoken_languages)")
removeUI(selector = "div:has(>> #spoken_languages)")
source(file = "functions_final_project.R", local = T)
ui <- fluidPage(
# Application title
titlePanel("EL PELIROSTER"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("genre_1", "GENRES 1", c("All", "Action", "Adventure", "Fantasy", "Science Fiction", "Crime", "Drama", "Thriller",
"Animation", "Family", "Western", "Comedy", "Romance", "Horror", "Mystery", "History", "War",
"Music", "Documentary", "Foreign", "TV Movie"), selected = NULL, multiple = FALSE, width = NULL),
selectInput("genre_2", "GENRES 2", c("All", "Action", "Adventure", "Fantasy", "Science Fiction", "Crime", "Drama", "Thriller",
"Animation", "Family", "Western", "Comedy", "Romance", "Horror", "Mystery", "History", "War",
"Music", "Documentary", "Foreign", "TV Movie"), selected = NULL, multiple = FALSE, width = NULL),
sliderInput("vote_average", "AVERAGE RATING", min = 0, max = 10, value = 5),
sliderInput("popularity", "POPULARITY", min = 0, max = 150, value = 75),
sliderInput("runtime", "MAXIMUM LENGTH (MINUTES)", min = 0, max = 340, value = 170),
dateInput("date_before", "FILMS BEFORE", value = "2017-02-03", format = "dd-mm-yyyy"),
dateInput("date_after", "FILMS AFTER", value = "1916-09-04", format = "dd-mm-yyyy"),
selectInput("original_language", "ORIGINAL LANGUAGE",
c("All", "English" = "en", "Japanese" = "ja", "French" = "fr", "Chinese" = "zh", "Spanish" = "es", "German" = "de",
"Hindi" = "hi", "Russian" = "ru", "Korean" = "ko", "Telugu" = "te", "Catalan" = "cn", "Italian" = "it", "Dutch" = "nl",
"Tamil" = "ta", "Swedish" = "sv", "Thai" = "th", "Danish" = "da", "Hungarian" = "hu", "Czech" = "cs", "Portuguese" = "pt",
"Icelandic" = "is", "Turkish" = "tr", "Norwegian BokmÃ¥l" = "nb", "Afrikaans" = "af", "Polish" = "pl", "Hebrew" = "he",
"Arabic" = "ar", "Vietnamese" = "vi", "Kyrgyz" = "ky", "Indonesian" = "id", "Romanian" = "ro", "Persian" = "fa",
"Norwegian" = "no", "Slovenian" = "sl", "Pashto"= "ps", "Greek" = "el"
), selected = NULL, multiple = FALSE, width = NULL),
selectInput("spoken_languages", "DUBBED LANGUAGE",
c("All", "English", "EspaÃ±ol", "FranÃ§ais", "Italiano", "Deutsch", "TÃ¼rkÃ§e", "ÎµÎ»Î»Î·Î½Î¹ÎºÎ¬",
"æ®éè¯", "à¸ à¸²à¸©à¸²à¹à¸à¸¢", "Ãslenska",  "PÑÑÑÐºÐ¸Ð¹", "svenska", "RomÃ¢nÄ", "æ¥æ¬èª", "Latin",
"à¤¹à¤¿à¤¨à¥à¤¦à¥", "PortuguÃªs", "ÙØ§Ø±Ø³Û" , "Ø§Ø±Ø¯Ù"  ,"Ø§ÙØ¹Ø±Ø¨ÙØ©" , "ÄeskÃ½", "å¹¿å·è¯ / å»£å·è©±",
"íêµ­ì´/ì¡°ì ë§" ,"Norsk", "à®¤à®®à®¿à®´à¯", "×¢Ö´×Ö°×¨Ö´××ª", "Dansk", "Nederlands", "Afrikaans", "Gaeilge",
"Somali", "suomi", "Kiswahili", "Ð±ÑÐ»Ð³Ð°ÑÑÐºÐ¸ ÐµÐ·Ð¸Ðº", "Tiáº¿ng Viá»t", "Magyar", "Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ¸Ð¹",
"Esperanto" , "Polski", "à¨ªà©°à¨à¨¾à¨¬à©", "Eesti","shqip","Srpski","Bosanski","Hrvatski","SlovenÄina","ÒÐ°Ð·Ð°Ò",
"à°¤à±à°²à±à°à±", "Cymraeg","Wolof","isiZulu", "Ù¾ÚØªÙ", "No Language",  "Galego","á¥áá áá£áá"  ,
"à¦¬à¦¾à¦à¦²à¦¾" , "CatalÃ ", "Bahasa indonesia" , "Bamanankan" ,"SlovenÅ¡Äina"
), selected = NULL, multiple = FALSE, width = NULL),
actionButton("compute", "Confirm Criteria", icon = icon("film"), class = "btn-success")
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("RECOMMENDATIONS", tableOutput("peli")),
tabPanel("RANDOMIZER"),
tabPanel("PELIRANDOM")
),
)
)
)
library(shiny); runApp('MovieApp.R')
>>>>>>> Stashed changes
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
ui <- fluidPage(
shinythemes::themeSelector(),
theme = bslib::bs_theme(bootswatch = "superhero"),
checkboxInput(
inputId = "themeToggle",
label = icon("sun")
),
# Application title
titlePanel(tags$img(src = "MyImage.jpg", height = 200, width = 200)),
# Tabset pannel to choose from each tab
tabsetPanel(
id = "tabset",
tabPanel("PeliDaily", icon = icon("calendar"),
mainPanel(
textOutput("daily_text"),
tags$head(tags$style("#daily_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
withSpinner(tableOutput("daily")))
),
tabPanel("PeliRecommend",
icon = icon("random"),
fluid = TRUE,
sidebarLayout(
position = "right",
sidebarPanel(
align = "center",
h3("MOVIES BASED ON YOUR CRITERIA", align = "center", style = "color:cyan"),
br(),
actionBttn("compute", "SHOW ME A MOVIE", icon = icon("film"), color = "success", style = "fill"),
br(),
br(),
br(),
selectInput("genre_1", "GENRES 1", list_genres, selected = NULL, multiple = FALSE, width = NULL),
br(),
selectInput("genre_2", "GENRES 2", list_genres, selected = NULL, multiple = FALSE, width = NULL),
br(),
sliderInput("vote_average", "MINIMUM RATING", min = 0, max = 10, value = 0),
br(),
dateRangeInput("date", "DATE", end = "2017-02-03", start = "1916-09-04", min = "1916-09-04", max = "2017-02-03",format = "dd-mm-yyyy", startview = "decade"),
br(),
sliderInput("runtime", "MAXIMUM LENGTH (MINUTES)", min = 0, max = 340, value = 340),
br(),
selectInput("original_language", "ORIGINAL LANGUAGE",
c("All", "Afrikaans" = "af", "Arabic" = "ar", "Catalan" = "cn", "Chinese" = "zh", "Czech" = "cs", "Danish" = "da", "Dutch" = "nl", "English" = "en", "French" = "fr", "German" = "de", "Greek" = "el", "Hebrew" = "he", "Hindi" = "hi", "Hungarian" = "hu", "Icelandic" = "is", "Indonesian" = "id", "Italian" = "it", "Japanese" = "ja", "Korean" = "ko", "Kyrgyz" = "ky", "Norwegian BokmÃ¥l" = "nb", "Norwegian" = "no", "Pashto" = "ps", "Persian" = "fa", "Polish" = "pl", "Portuguese" = "pt", "Romanian" = "ro", "Russian" = "ru", "Slovenian" = "sl", "Spanish" = "es", "Swedish" = "sv", "Tamil" = "ta", "Telugu" = "te", "Thai" = "th", "Turkish" = "tr", "Vietnamese" = "vi"),
selected = NULL, multiple = FALSE, width = NULL
),
br(),
selectInput("spoken_languages", "DUBBED LANGUAGE", list_spoken_languages, selected = NULL, multiple = FALSE, width = NULL),
br(),
actionBttn("clear_1", "CLEAR", icon = icon("ban"), color = "danger", style = "fill")
),
mainPanel(
textOutput("recommend_text"),
tags$head(tags$style("#recommend_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
withSpinner(tableOutput("recommend")))
)
),
tabPanel("PeliSearch",
icon = icon("search"),
fluid = TRUE,
sidebarLayout(
position = "right",
sidebarPanel(
align = "center",
h3("MOVIE SEARCH", align = "center", style = "color:cyan"),
br(),
actionBttn("compute_2", "SHOW ME THE MOVIES", icon = icon("film"), color = "success", style = "fill"),
br(),
br(),
h4("OFFICIAL TITLE"),
textInput(inputId = "title", label = "", value = ""),
br(),
textInput(inputId = "key_words_1", label = "KEY WORDS 1", value = ""),
br(),
textInput(inputId = "key_words_2", label = "KEY WORD 2", value = ""),
br(),
textInput(inputId = "key_words_3", label = "KEY WORD 3", value = ""),
br(),
sliderInput("popularity", "MINIMUM POPULARITY", min = 0, max = 150, value = 0),
br(),
selectInput("country", "PRODUCTION COUNTRY", list(
"All",
"Africa" = c("Algeria", "Angola", "Cameroon", "Egypt", "Kenya", "Libyan Arab Jamahiriya", "Morocco", "Nigeria", "South Africa", "Tunisia"),
"America" = c("Argentina", "Aruba", "Bahamas", "Bolivia", "Brazil", "Canada", "Chile", "Colombia", "Dominica", "Dominican Republic", "Ecuador", "Guadaloupe", "Guyana", "Jamaica", "Mexico", "Panama", "Peru", "United States of America"),
"Asia-Oceania" = c("Afghanistan", "Australia", "Bhutan", "Cambodia", "China", "Fiji", "Hong Kong", "India", "Indonesia", "Iran", "Israel", "Japan", "Jordan", "Kazakhstan", "Kyrgyz Republic", "Lebanon", "Malaysia", "New Zealand", "Pakistan", "Philippines", "Singapore", "South Korea", "Taiwan", "Thailand", "Turkey", "United Arab Emirates"),
"Europe" = c("Austria", "Belgium", "Bosnia and Herzegovina", "Bulgaria", "Cyprus", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Lithuania", "Luxembourg", "Malta", "Monaco", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "Serbia", "Serbia and Montenegro", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")
), selected = NULL, multiple = FALSE, width = NULL),
br(),
actionBttn("clear_2", "CLEAR", icon = icon("ban"), color = "danger", style = "fill")
),
mainPanel(
textOutput("search_text"),
tags$head(tags$style("#search_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
withSpinner(tableOutput("search"))
)
)
),
tabPanel("PeliPopCorn", icon = icon("fire"),
mainPanel(
style = "font-family: 'Comic Sans MS';",
p(""),
h3("YOUR POP CORN RECIPE", align = "center"),
strong("Ingredients : "),
p("- 2 tbsp vegetable oil"),
p("- 100g popcorn kernels"),
p("- 250g caster sugar"),
p("- 50g salted butter , cubed"),
p(""),
p(""),
strong("Method"),
p(""),
p("STEP 1"),
p("Put the oil in a large saucepan with a tight-fitting lid over a medium heat. Toss the popcorn kernels in the oil to coat. Put the lid on, and keep over a medium heat until you hear the first popcorn pop, then turn the heat to medium-low. When you begin to hear lots of popping, give the pan a shake. Continue to shake frequently until the popping stops. Turn off the heat and leave in the pan."),
p(""),
p("STEP 2"),
p("Line a large baking tray with baking parchment. Put the sugar and 60ml water into a medium heavy-based saucepan and bring to the boil. Stir until the sugar has dissolved, then leave over a medium heat, without stirring, for 6-8 mins. It should start to turn into a golden caramel, swirl it around and add the butter – stand back as it may spit a little. Stir well until combined."),
p("STEP 3"),
p("Pour the caramel over the popcorn in the pan and stir immediately to coat the popcorn, being careful not to touch the hot caramel. Carefully transfer onto the lined baking tray and press down with the back of a spoon to spread evenly. Leave to cool for 5 mins, then break apart and eat. "),
strong("ENJOY !!!!"),
p(""),
img(src="https://flyclipart.com/thumb2/cute-ryan-kakaofriends-kakaotalk-bored-popcorn-sofa-tv-571498.png")
)),
tabPanel("PeliData", icon = icon("info"))
)
)
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
install.packages("OpenImageR")
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
