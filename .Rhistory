p("Put the oil in a large saucepan with a tight-fitting lid over a medium heat. Toss the popcorn kernels in the oil to coat. Put the lid on, and keep over a medium heat until you hear the first popcorn pop, then turn the heat to medium-low. When you begin to hear lots of popping, give the pan a shake. Continue to shake frequently until the popping stops. Turn off the heat and leave in the pan.", style = "color:orange"),
p(""),
p(""),
h4("STEP 2", style = "color:yellow"),
p("Line a large baking tray with baking parchment. Put the sugar and 60ml water into a medium heavy-based saucepan and bring to the boil. Stir until the sugar has dissolved, then leave over a medium heat, without stirring, for 6-8 mins. It should start to turn into a golden caramel, swirl it around and add the butter - stand back as it may spit a little. Stir well until combined.", style = "color:orange"),
p(""),
p(""),
h4("STEP 3", style = "color:yellow"),
p("Pour the caramel over the popcorn in the pan and stir immediately to coat the popcorn, being careful not to touch the hot caramel. Carefully transfer onto the lined baking tray and press down with the back of a spoon to spread evenly. Leave to cool for 5 mins, then break apart and eat. ", style = "color:orange"),
h2("ENJOY !!!!", align = "center", style = "color:red"),
p(""),
div(img(src="https://cdn.dribbble.com/users/953617/screenshots/10404379/media/1402a0bc576dc70b2ba1785ef44194c2.png", height = 500, width = 700), align = "center"),
p(""),
p("")
)),
tabPanel("PeliData", icon = icon("info"),
mainPanel(
align = "center",
br(),
h3("Interactive plot of : BUDGET vs REVENUE", style = "color:cyan"),
br(),
withSpinner(plotlyOutput("plot_data")),
br(),
br(),
br(),
br(),
p("Did that spectacular graph bore you ?"),
br(),
actionBttn("close", "-> If so click here <-", color = "success", style = "fill")
))
)
)
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
install.packages("naniar")
runApp('MovieApp.R')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
?options
?spinner
??spinner
?options
shiny::runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
?prompts
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
install.packages("shinysurveys")
install.packages("shinysurveys")
server <- function(input, output, session) {
shinysurveys::renderSurvey()
}
shiny::runApp('~/Documents/GitHub/cleardark2')
remotes::install_github("deepanshu88/shinyDarkmode")
library(shinyDarkmode)
runApp('~/Documents/GitHub/sheittt')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
size = 7
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (i in seq(1, size)){
empty[i,j] = 1/(i+j−1)
}
}
size = 7
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = 1/(i+j−1)
}
}
View(empty)
size = 7
hilbert_mat = function(size){
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = 1/(i+j−1)
}
}
}
hilbert_mat(size)
size = 7
hilbert_mat = function(size){
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = 1/(i+j−1)
}
}
return(empty)
}
hilbert_mat(size)
f_0 = function(x, y){
result = (sin(10*((x^2)+(y^2))))/10
return(result)
}
f_0(x=1,y=1.2)
f_0(x = 1, y = 1.2)
library(plotly)
size = 400
X = seq(from = -1.5, to = 1.5, length.out = size)
Y = x
size = 400
X = seq(from = -1.5, to = 1.5, length.out = size)
Y = X
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = f_0(x = X[i], y = Y[i])
}
}
plot <- plot_ly(x = X, y = Y, z = empty )
library(plotly)
size = 400
X = seq(from = -1.5, to = 1.5, length.out = size)
Y = X
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = f_0(x = X[i], y = Y[i])
}
}
plot_ly(x = X, y = Y, z = empty )
library(plotly)
size = 400
X = seq(from = -1.5, to = 1.5, length.out = size)
Y = X
empty <- matrix(0, size, size)
for (i in seq(1, size)){
for (j in seq(1, size)){
empty[i,j] = f_0(x = X[i], y = Y[i])
}
}
plot_ly(x = X, y = Y, z = empty) %>% add_surface
View(empty)
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
View(AAPL)
?ClCl
AAPL_ret = na.omit(ClCl(AAPL))
AMZN_ret = na.omit(ClCl(AMZN))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
length(all_stocks)
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks)))
AAPL_ret = na.omit(ClCl(i))
AMZN_ret = na.omit(ClCl(j))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(i))
AMZN_ret = na.omit(ClCl(j))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
}
AAPL_ret = na.omit(ClCl(i))
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
AAPL_ret = na.omit(ClCl(AAPL))
AMZN_ret = na.omit(ClCl(AMZN))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
all_stocks(1)
all_stocks[1]
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
}}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,3)
z[j,i] = var_investment
}
}
?rbinom
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
}
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times+1,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
plot(data)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times+1,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] <= 0){
bacteria_matrix[i+1, 1] = 0
}
if (bacteria_matrix[i,1]> 15 && bacteria_matrix[i,1] > 0){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
}
if(bacteria_matrix[i,1]<= 15 && bacteria_matrix[i,1] > 0){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
plot(data)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,3)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,1)
z[i,1] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 100,1)
z[i,1] = var_investment
}
}
min(z)
View(z)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", )
z[i,1] = var_investment
}
}
library(shiny); runApp('MovieApp.R')
