plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = paste0(df$title, "$<br>Revenue : ", df$revenue, "$<br>Budget :", df$budget, "$<br>Date :", df$release_date),
hoverinfo = "text",
showlegend = F)
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
showlegend = F)
return(plot)
}
plot_movie(movies_df)
library(shiny); runApp('MovieApp.R')
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
visible: "legendonly")
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
visible: "legendonly")
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
visible = "legendonly")
return(plot)
}
plot_movie(movies_df)
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
)
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
showlegend = F)
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue, type = "scatter3d",
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
showlegend = F,
hide_legend = T)
return(plot)
}
plot_movie(movies_df)
plot_movie = function(df){
plot <- plot_ly(data = df, x = ~release_date, y = ~budget, z = ~revenue,
marker = list(color = ~vote_average, colorscale = c('#FC0303', '#03FC4A'),
showscale = TRUE, size = 6,
line = list(color = 'rgb(0,0,0)',
width = 1)))
plot <- plot %>% add_markers()
plot <- plot %>% layout(
scene = list(
xaxis = list(title = list(text = 'Release Date', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
yaxis = list(title = list(text = 'Budget', font = list(color = "cyan")), autorange="reversed", gridcolor = 'rgb(0, 255, 255)'),
zaxis = list(title = list(text = 'Revenue', font = list(color = "cyan")), gridcolor = 'rgb(0, 255, 255)')),
font = list(color = "cyan"),
legend = list(color = "cyan"),
annotations = list(
x = 1.1,
y = 1.03,
text = 'Rating',
color = "cyan",
xref = 'paper',
yref = 'paper',
showarrow = FALSE
),
paper_bgcolor = "rgba(43,62,80,255)") %>%
add_trace(
text = df$title,
hoverinfo = "text",
showlegend = F)
return(plot)
}
plot_movie(movies_df)
runApp('MovieApp.R')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
ui <- fluidPage(
# Changing themes of page
shinythemes::themeSelector(),
theme = bslib::bs_theme(bootswatch = "superhero"),
checkboxInput(
inputId = "themeToggle",
label = icon("sun")
),
# Application title
titlePanel(tags$img(src = "MyImage.jpg", height = 200, width = 200)),
# Making page close
useShinyjs(),
extendShinyjs(text = jscode, functions = c("closeWindow")),
# Tabset pannel to choose from each tab
tabsetPanel(
id = "tabset",
tabPanel("PeliDaily", icon = icon("calendar"),
mainPanel(
br(),
textOutput("daily_text"),
tags$head(tags$style("#daily_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_1"),
tags$head(tags$style("#text_1{color: orange;font-size: 37px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_2"),
tags$head(tags$style("#text_2{color: orange;font-size: 25px;font-style: bold; text-align: center;}")),
br(),
br(),
textOutput("text_3"),
tags$head(tags$style("#text_3{font-size: 20px; text-align: left;}")),
br(),
textOutput("text_4"),
tags$head(tags$style("#text_4{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_5"),
tags$head(tags$style("#text_5{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_6"),
tags$head(tags$style("#text_6{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_7"),
tags$head(tags$style("#text_7{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br()
)
),
tabPanel("PeliRecommend",
icon = icon("random"),
fluid = TRUE,
sidebarLayout(
position = "right",
sidebarPanel(
align = "center",
h3("MOVIES BASED ON YOUR CRITERIA", align = "center", style = "color:cyan"),
br(),
actionBttn("compute", "SHOW ME A MOVIE", icon = icon("film"), color = "success", style = "fill"),
br(),
br(),
br(),
selectInput("genre_1", "GENRES 1", list_genres, selected = NULL, multiple = FALSE, width = NULL),
br(),
selectInput("genre_2", "GENRES 2", list_genres, selected = NULL, multiple = FALSE, width = NULL),
br(),
sliderInput("vote_average", "MINIMUM RATING", min = 0, max = 10, value = 0),
br(),
dateRangeInput("date", "DATE", end = "2017-02-03", start = "1916-09-04", min = "1916-09-04", max = "2017-02-03",format = "dd-mm-yyyy", startview = "decade"),
br(),
sliderInput("runtime", "MAXIMUM LENGTH (MINUTES)", min = 0, max = 340, value = 340),
br(),
selectInput("original_language", "ORIGINAL LANGUAGE",
c("All", "Afrikaans" = "af", "Arabic" = "ar", "Catalan" = "cn", "Chinese" = "zh", "Czech" = "cs", "Danish" = "da", "Dutch" = "nl", "English" = "en", "French" = "fr", "German" = "de", "Greek" = "el", "Hebrew" = "he", "Hindi" = "hi", "Hungarian" = "hu", "Icelandic" = "is", "Indonesian" = "id", "Italian" = "it", "Japanese" = "ja", "Korean" = "ko", "Kyrgyz" = "ky", "Norwegian BokmÃ¥l" = "nb", "Norwegian" = "no", "Pashto" = "ps", "Persian" = "fa", "Polish" = "pl", "Portuguese" = "pt", "Romanian" = "ro", "Russian" = "ru", "Slovenian" = "sl", "Spanish" = "es", "Swedish" = "sv", "Tamil" = "ta", "Telugu" = "te", "Thai" = "th", "Turkish" = "tr", "Vietnamese" = "vi"),
selected = NULL, multiple = FALSE, width = NULL
),
br(),
selectInput("spoken_languages", "DUBBED LANGUAGE", list_spoken_languages, selected = NULL, multiple = FALSE, width = NULL),
br(),
actionBttn("clear_1", "CLEAR", icon = icon("ban"), color = "danger", style = "fill")
),
mainPanel(
br(),
textOutput("recommend_text"),
tags$head(tags$style("#recommend_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_8"),
tags$head(tags$style("#text_8{color: orange;font-size: 37px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_9"),
tags$head(tags$style("#text_9{color: orange;font-size: 25px;font-style: bold; text-align: center;}")),
br(),
br(),
textOutput("text_10"),
tags$head(tags$style("#text_10{font-size: 20px; text-align: left;}")),
br(),
textOutput("text_11"),
tags$head(tags$style("#text_11{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_12"),
tags$head(tags$style("#text_12{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_13"),
tags$head(tags$style("#text_13{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
br(),
textOutput("text_14"),
tags$head(tags$style("#text_14{color: cyan;font-size: 17px;font-style: bold; text-align: center;}"))
)
)
),
tabPanel("PeliSearch",
icon = icon("search"),
fluid = TRUE,
sidebarLayout(
position = "right",
sidebarPanel(
align = "center",
h3("MOVIE SEARCH", align = "center", style = "color:cyan"),
br(),
actionBttn("compute_2", "SHOW ME THE MOVIES", icon = icon("film"), color = "success", style = "fill"),
br(),
br(),
h4("OFFICIAL TITLE"),
textInput(inputId = "title", label = "", value = ""),
br(),
textInput(inputId = "key_words_1", label = "KEY WORDS 1", value = ""),
br(),
textInput(inputId = "key_words_2", label = "KEY WORD 2", value = ""),
br(),
textInput(inputId = "key_words_3", label = "KEY WORD 3", value = ""),
br(),
sliderInput("popularity", "MINIMUM POPULARITY", min = 0, max = 150, value = 0),
br(),
selectInput("country", "PRODUCTION COUNTRY", list(
"All",
"Africa" = c("Algeria", "Angola", "Cameroon", "Egypt", "Kenya", "Libyan Arab Jamahiriya", "Morocco", "Nigeria", "South Africa", "Tunisia"),
"America" = c("Argentina", "Aruba", "Bahamas", "Bolivia", "Brazil", "Canada", "Chile", "Colombia", "Dominica", "Dominican Republic", "Ecuador", "Guadaloupe", "Guyana", "Jamaica", "Mexico", "Panama", "Peru", "United States of America"),
"Asia-Oceania" = c("Afghanistan", "Australia", "Bhutan", "Cambodia", "China", "Fiji", "Hong Kong", "India", "Indonesia", "Iran", "Israel", "Japan", "Jordan", "Kazakhstan", "Kyrgyz Republic", "Lebanon", "Malaysia", "New Zealand", "Pakistan", "Philippines", "Singapore", "South Korea", "Taiwan", "Thailand", "Turkey", "United Arab Emirates"),
"Europe" = c("Austria", "Belgium", "Bosnia and Herzegovina", "Bulgaria", "Cyprus", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Hungary", "Iceland", "Ireland", "Italy", "Lithuania", "Luxembourg", "Malta", "Monaco", "Netherlands", "Norway", "Poland", "Portugal", "Romania", "Russia", "Serbia", "Serbia and Montenegro", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Ukraine", "United Kingdom")
), selected = NULL, multiple = FALSE, width = NULL),
br(),
actionBttn("clear_2", "CLEAR", icon = icon("ban"), color = "danger", style = "fill")
),
mainPanel(
br(),
textOutput("search_text"),
br(),
tags$head(tags$style("#search_text{color: cyan;font-size: 17px;font-style: bold; text-align: center;}")),
withSpinner(tableOutput("search"))
)
)
),
tabPanel("PeliPopCorn", icon = icon("fire"),
mainPanel(
style = "font-family: 'Comic Sans MS';",
h2("POP CORN RECIPE !!!!", align = "center", style = "color:cyan"),
h4("Ingredients : ", style = "color:pink"),
p(""),
p("- 2 tbsp vegetable oil", style = "color:purple"),
p("- 100g popcorn kernels", style = "color:purple"),
p("- 250g caster sugar", style = "color:purple"),
p("- 50g salted butter , cubed", style = "color:purple"),
h3("Method", align = "center", style = "color:green"),
h4("STEP 1", style = "color:yellow"),
p("Put the oil in a large saucepan with a tight-fitting lid over a medium heat. Toss the popcorn kernels in the oil to coat. Put the lid on, and keep over a medium heat until you hear the first popcorn pop, then turn the heat to medium-low. When you begin to hear lots of popping, give the pan a shake. Continue to shake frequently until the popping stops. Turn off the heat and leave in the pan.", style = "color:orange"),
p(""),
p(""),
h4("STEP 2", style = "color:yellow"),
p("Line a large baking tray with baking parchment. Put the sugar and 60ml water into a medium heavy-based saucepan and bring to the boil. Stir until the sugar has dissolved, then leave over a medium heat, without stirring, for 6-8 mins. It should start to turn into a golden caramel, swirl it around and add the butter - stand back as it may spit a little. Stir well until combined.", style = "color:orange"),
p(""),
p(""),
h4("STEP 3", style = "color:yellow"),
p("Pour the caramel over the popcorn in the pan and stir immediately to coat the popcorn, being careful not to touch the hot caramel. Carefully transfer onto the lined baking tray and press down with the back of a spoon to spread evenly. Leave to cool for 5 mins, then break apart and eat. ", style = "color:orange"),
h2("ENJOY !!!!", align = "center", style = "color:red"),
p(""),
div(img(src="https://cdn.dribbble.com/users/953617/screenshots/10404379/media/1402a0bc576dc70b2ba1785ef44194c2.png", height = 500, width = 700), align = "center"),
p(""),
p("")
)),
tabPanel("PeliData", icon = icon("info"),
mainPanel(
align = "center",
br(),
h3("Interactive plot of : BUDGET vs REVENUE", style = "color:cyan"),
br(),
withSpinner(plotlyOutput("plot_data")),
br(),
br(),
br(),
br(),
p("Did that spectacular graph bore you ?"),
br(),
actionBttn("close", "-> If so click here <-", color = "success", style = "fill")
))
)
)
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
install.packages("naniar")
runApp('MovieApp.R')
runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
?options
?spinner
??spinner
?options
shiny::runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
?prompts
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
runApp('~/Documents/GitHub/optionspinnertest')
install.packages("shinysurveys")
install.packages("shinysurveys")
server <- function(input, output, session) {
shinysurveys::renderSurvey()
}
shiny::runApp('~/Documents/GitHub/cleardark2')
remotes::install_github("deepanshu88/shinyDarkmode")
library(shinyDarkmode)
runApp('~/Documents/GitHub/sheittt')
runApp('MovieApp.R')
