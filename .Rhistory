knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop_ma)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
```
<br>
<br>
```{r first part first graph b) , echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Second Graph with Confirmed per pop (i.e. the original variable before smoothing the data) :
ch_plot = ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
ch_plot
```
```{r first part second data manipulation, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
data_neighbours_1 = ""
data_neighbours_1 = data %>%
filter(data_total.admin == "Germany") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_2 = data %>%
filter(data_total.admin == "Italy") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_3 = data %>%
filter(data_total.admin == "Austria") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_4 = data %>%
filter(data_total.admin == "France") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_5 = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours <- rbind(data_neighbours_1, data_neighbours_2, data_neighbours_3, data_neighbours_4, data_neighbours_5)
data_neighbours = data_neighbours %>% rename(Country = data_total.iso_alpha_3)
```
<br>
<br>
```{r first part second graph, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_plot = ggplot(data_neighbours, aes(x = data_total.date, y = data_total.confirmed_per_pop_ma, color = Country)) +
geom_line(size = 1) +
labs(title = 'COVID-19 Confirmed cases divided per the population',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population' , ) +
theme_minimal()
eu_plot
```
```{r first part third data manipulation, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
eu_anim = eu_plot + geom_point() + transition_reveal(data_total.date)
```
<br>
<br>
```{r first part third graph, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_anim
```
<br>
<br>
## *PART 2*
<br>
```{r second part first data manipulation, echo = FALSE, include = FALSE, warning = FALSE}
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
data_europe = data %>%
filter(data_total.date == as.Date("2022-03-12")) %>%
select(data_total.admin, data_total.confirmed_per_pop_ma)
map <- filter(world, admin %in% data$data_total.admin)
data_map = cbind(data_europe, map)
covid_map = ggplot() +
geom_sf(data = data_map, aes(fill = data_total.confirmed_per_pop_ma, geometry = geometry)) +
coord_sf(xlim = c(-20, 40), ylim = c(35, 70), expand = T) +
labs(title = "covid-19 confirmed cases per population (log): 2022-03-12",
x = 'Latitude',
y = 'Longitude' ) +
theme(legend.position = "bottom") +
theme(legend.text = element_text(size = 4)) +
scale_fill_viridis(trans = "log", name = "confirmed cases divided per population (log)")
```
```{r second part first map, echo = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
covid_map
```
```{r second part second data manipulation, echo = FALSE, include = FALSE, warning = FALSE}
date <- seq.Date(as.Date(c("2020-03-01")), Sys.Date(), by = "14 day")
data_europe_dated = data %>%
filter(data_total.date %in% date) %>%
select(data_total.admin, data_total.date, data_total.confirmed_per_pop_ma)
names <- data_europe_dated$data_total.admin
table(names)
# <font color="blue">So there are 54 of each observations </font></p>
map <- map[rep(seq_len(nrow(map)), each = 54), ]
data_maps = cbind(data_europe_dated, map)
plot_covid = ggplot(data = data_maps) +
geom_sf(aes(fill = data_total.confirmed_per_pop_ma, geometry = geometry)) +
coord_sf(xlim = c(-20, 40), ylim = c(35, 70), expand = T) +
labs(x = 'Latitude', y = 'Longitude') +
theme(legend.position = "bottom") +
theme(legend.text = element_text(size = 4)) +
scale_fill_viridis(trans = "log", name = "confirmed cases divided per population (log)") +
transition_states(data_total.date) +
labs(title = 'covid-19 confirmed cases per population (log):' )
```
```{r part 2 animated map, echo = FALSE, warning = FALSE}
animate(plot_covid, fps = 4)
```
<br>
<br>
# ***EXERCISE 2***
```{r exercise 2 data of cars in 1920, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
require(stats); require(graphics)
ggplot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
title(main = "cars data")
ggplot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, log = "xy")
title(main = "cars data (logarithmic scales)")
lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
summary(fm1 <- lm(log(dist) ~ log(speed), data = cars))
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0),
mar = c(4.1, 4.1, 2.1, 1.1))
ggplot(fm1)
par(opar)
library(devtools)
library(tidyverse)
library(knitr)
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(magick)
library(ggplot2)
#TABLE 1
gapminder
LifeExp <- gapminder %>%
select(2,3,4)%>%
group_by(continent,year)%>%
summarise(lifeExp=mean(lifeExp))
#LifeExp graph
graph1 = LifeExp %>%
ggplot(aes(x=year,y=lifeExp, color=continent)) +
geom_line(size=1, alpha = 0.75)
theme_solarized_2(light = FALSE) +
labs(title = "Esp√©rance de vie", y="Age")+
geom_point()
graph1.animation = graph1 +
transition_reveal(year) +
view_follow(fixed_y = TRUE)
gif1 <-animate(graph1.animation, height =300, width = 300, fps = 100, duration = 15, end_pause = 60, res=100)
anim_save("life.gif")
#GDP graph
GDPperCAP <- gapminder%>%
select(2,3,5,6)%>%
group_by(continent,year)%>%
summarise(gdpPercap=mean(gdpPercap),
pop=sum(pop))
graph2<- ggplot(GDPperCAP, aes(x= year, y= gdpPercap, size= pop, color=continent)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = continent_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10()+
labs(title = 'Year: {frame_time}', x = 'Year', y = 'GDP PER CAPITA') +
transition_time(year) +
ease_aes('linear')
gif2 <- animate(graph2, height =300, width = 300, fps = 100, duration = 15, end_pause = 60, res=100)
anim_save("GDP.gif")
library(ggplot2)
gif1
gif2
```
# install.packages("devtools")
devtools::install_github("soodoku/tuber", build_vignettes = TRUE)
get_stats(video_id = "N708P-A45D0")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
---
title: "Intro_DS_HW2"
author: "Lucas, Matteo, Raphael"
date: '2022-03-24'
output: html_document
---
<center>
# ***EXERCISE 1***
## *PART 1*
```{r data manipulation, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(devtools)
devtools::install_github("SMAC-Group/idar")
library(idar)
library(dplyr)
library(ggplot2)
library(gganimate)
library(viridis)
library(magick)
colnames(data_covid_europe_spatial)
str(data_covid_europe_spatial)
data_total <- data_covid_europe_spatial
data = data.frame(data_total$admin, data_total$iso_alpha_3 ,data_total$date,data_total$confirmed_per_pop_ma, data_total$confirmed_per_pop)
data_ch = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.date, data_total.confirmed_per_pop_ma, data_total.confirmed_per_pop)
```
```{r first part first graph, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop_ma)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
```
<br>
<br>
```{r first part first graph b) , echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Second Graph with Confirmed per pop (i.e. the original variable before smoothing the data) :
ch_plot = ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
ch_plot
```
```{r first part second data manipulation, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
data_neighbours_1 = ""
data_neighbours_1 = data %>%
filter(data_total.admin == "Germany") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_2 = data %>%
filter(data_total.admin == "Italy") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_3 = data %>%
filter(data_total.admin == "Austria") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_4 = data %>%
filter(data_total.admin == "France") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_5 = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours <- rbind(data_neighbours_1, data_neighbours_2, data_neighbours_3, data_neighbours_4, data_neighbours_5)
data_neighbours = data_neighbours %>% rename(Country = data_total.iso_alpha_3)
```
<br>
<br>
```{r first part second graph, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_plot = ggplot(data_neighbours, aes(x = data_total.date, y = data_total.confirmed_per_pop_ma, color = Country)) +
geom_line(size = 1) +
labs(title = 'COVID-19 Confirmed cases divided per the population',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population' , ) +
theme_minimal()
eu_plot
```
```{r first part third data manipulation, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
eu_anim = eu_plot + geom_point() + transition_reveal(data_total.date)
```
<br>
<br>
```{r first part third graph, echo = FALSE, message = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_anim
```
<br>
<br>
## *PART 2*
<br>
```{r second part first data manipulation, echo = FALSE, include = FALSE, warning = FALSE}
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
data_europe = data %>%
filter(data_total.date == as.Date("2022-03-12")) %>%
select(data_total.admin, data_total.confirmed_per_pop_ma)
map <- filter(world, admin %in% data$data_total.admin)
data_map = cbind(data_europe, map)
covid_map = ggplot() +
geom_sf(data = data_map, aes(fill = data_total.confirmed_per_pop_ma, geometry = geometry)) +
coord_sf(xlim = c(-20, 40), ylim = c(35, 70), expand = T) +
labs(title = "covid-19 confirmed cases per population (log): 2022-03-12",
x = 'Latitude',
y = 'Longitude' ) +
theme(legend.position = "bottom") +
theme(legend.text = element_text(size = 4)) +
scale_fill_viridis(trans = "log", name = "confirmed cases divided per population (log)")
```
```{r second part first map, echo = FALSE, warning = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
covid_map
```
```{r second part second data manipulation, echo = FALSE, include = FALSE, warning = FALSE}
date <- seq.Date(as.Date(c("2020-03-01")), Sys.Date(), by = "14 day")
data_europe_dated = data %>%
filter(data_total.date %in% date) %>%
select(data_total.admin, data_total.date, data_total.confirmed_per_pop_ma)
names <- data_europe_dated$data_total.admin
table(names)
# <font color="blue">So there are 54 of each observations </font></p>
map <- map[rep(seq_len(nrow(map)), each = 54), ]
data_maps = cbind(data_europe_dated, map)
plot_covid = ggplot(data = data_maps) +
geom_sf(aes(fill = data_total.confirmed_per_pop_ma, geometry = geometry)) +
coord_sf(xlim = c(-20, 40), ylim = c(35, 70), expand = T) +
labs(x = 'Latitude', y = 'Longitude') +
theme(legend.position = "bottom") +
theme(legend.text = element_text(size = 4)) +
scale_fill_viridis(trans = "log", name = "confirmed cases divided per population (log)") +
transition_states(data_total.date) +
labs(title = 'covid-19 confirmed cases per population (log):' )
```
```{r part 2 animated map, echo = FALSE, warning = FALSE}
animate(plot_covid, fps = 4)
```
<br>
<br>
# ***EXERCISE 2***
```{r exercise 2 data of cars in 1920, echo = FALSE, message = FALSE, include = FALSE, warning = FALSE}
require(stats); require(graphics)
ggplot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1)
lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
title(main = "cars data")
ggplot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, log = "xy")
title(main = "cars data (logarithmic scales)")
lines(lowess(cars$speed, cars$dist, f = 2/3, iter = 3), col = "red")
summary(fm1 <- lm(log(dist) ~ log(speed), data = cars))
opar <- par(mfrow = c(2, 2), oma = c(0, 0, 1.1, 0),
mar = c(4.1, 4.1, 2.1, 1.1))
ggplot(fm1)
par(opar)
library(devtools)
library(tidyverse)
library(knitr)
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
library(magick)
library(ggplot2)
#TABLE 1
gapminder
LifeExp <- gapminder %>%
select(2,3,4)%>%
group_by(continent,year)%>%
summarise(lifeExp=mean(lifeExp))
#LifeExp graph
graph1 = LifeExp %>%
ggplot(aes(x=year,y=lifeExp, color=continent)) +
geom_line(size=1, alpha = 0.75)
#theme_solarized_2(light = FALSE) +
labs(title = "Esp√©rance de vie", y="Age")+
geom_point()
graph1.animation = graph1 +
transition_reveal(year) +
view_follow(fixed_y = TRUE)
gif1 <-animate(graph1.animation, height =300, width = 300, fps = 100, duration = 15, end_pause = 60, res=100)
anim_save("life.gif")
#GDP graph
GDPperCAP <- gapminder%>%
select(2,3,5,6)%>%
group_by(continent,year)%>%
summarise(gdpPercap=mean(gdpPercap),
pop=sum(pop))
graph2<- ggplot(GDPperCAP, aes(x= year, y= gdpPercap, size= pop, color=continent)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = continent_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10()+
labs(title = 'Year: {frame_time}', x = 'Year', y = 'GDP PER CAPITA') +
transition_time(year) +
ease_aes('linear')
gif2 <- animate(graph2, height =300, width = 300, fps = 100, duration = 15, end_pause = 60, res=100)
anim_save("GDP.gif")
library(ggplot2)
gif1
gif2
```
## References
1. McNeil, D. R. (1977) Interactive Data Analysis. Wiley.  (for the car experiment)
2. https://github.com/jennybc/gapminder
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(devtools)
devtools::install_github("SMAC-Group/idar")
library(idar)
library(dplyr)
library(ggplot2)
library(gganimate)
library(viridis)
library(magick)
colnames(data_covid_europe_spatial)
str(data_covid_europe_spatial)
data_total <- data_covid_europe_spatial
data = data.frame(data_total$admin, data_total$iso_alpha_3 ,data_total$date,data_total$confirmed_per_pop_ma, data_total$confirmed_per_pop)
data_ch = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.date, data_total.confirmed_per_pop_ma, data_total.confirmed_per_pop)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop_ma)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
#Second Graph with Confirmed per pop (i.e. the original variable before smoothing the data) :
ch_plot = ggplot(data_ch, aes(data_total.date, data_total.confirmed_per_pop)) +
geom_line(size = 1, colour = "blue") +
labs(title = 'COVID-19 Confirmed cases divided per the population in Switzerland',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population', ) +
theme_minimal()
ch_plot
data_neighbours_1 = ""
data_neighbours_1 = data %>%
filter(data_total.admin == "Germany") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin, data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_2 = data %>%
filter(data_total.admin == "Italy") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_3 = data %>%
filter(data_total.admin == "Austria") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_4 = data %>%
filter(data_total.admin == "France") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours_5 = data %>%
filter(data_total.admin == "Switzerland") %>%
filter(row_number() %% 7 == 1) %>%
select(data_total.admin,data_total.iso_alpha_3, data_total.date, data_total.confirmed_per_pop_ma)
data_neighbours <- rbind(data_neighbours_1, data_neighbours_2, data_neighbours_3, data_neighbours_4, data_neighbours_5)
data_neighbours = data_neighbours %>% rename(Country = data_total.iso_alpha_3)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
eu_plot = ggplot(data_neighbours, aes(x = data_total.date, y = data_total.confirmed_per_pop_ma, color = Country)) +
geom_line(size = 1) +
labs(title = 'COVID-19 Confirmed cases divided per the population',
x = 'Date',
y = 'COVID-19 Confirmed cases divided per the population' , ) +
theme_minimal()
eu_plot
eu_anim = eu_plot + geom_point() + transition_reveal(data_total.date)
num1=int(input("Enter num1:"))
num2=int(input("Enter num2:"))
action = str(input("Choose action : Add(a), Sub(s), Mult(m), Div(d) ->"))
print("The result is ",end="")
if action == "a":
print(num1+num2)
elif action == "s":
print(num1-num2)
elif action == "m":
print(num1*num2)
else:
print(num1/num2)
num1=int(input("Enter num1:"))
num2=int(input("Enter num2:"))
action = str(input("Choose action : Add(a), Sub(s), Mult(m), Div(d) ->"))
print("The result is ",end="")
if action == "a":
print(num1+num2)
if action == "s":
print(num1-num2)
if action == "m":
print(num1*num2)
else:
print(num1/num2)
library(shiny); runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
library(shiny); runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
runApp('Documents/GitHub/finalprojectttt/Final_Project/MovieApp.R')
?sort
library(shiny); runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
runApp('MovieApp.R')
