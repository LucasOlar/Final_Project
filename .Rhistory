AAPL_ret = na.omit(ClCl(i))
AMZN_ret = na.omit(ClCl(j))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(i))
AMZN_ret = na.omit(ClCl(j))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
}
AAPL_ret = na.omit(ClCl(i))
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
(var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2])
Z <- matrix(0, 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
AAPL_ret = na.omit(ClCl(AAPL))
AMZN_ret = na.omit(ClCl(AMZN))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
(omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2]))
(mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2])
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(all_stocks[i]))
AMZN_ret = na.omit(ClCl(all_stocks[j]))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = length(all_stocks))){
for (j in seq(from = 1, to = length(all_stocks))){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
#getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
all_stocks(1)
all_stocks[1]
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
}}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
library(quantmod)
all_stocks = c("AAPL", "AMZN", "DIS", "SHOP", "PINS", "NVDA", "F", "T", "TWTR", "BAC")
today = Sys.Date()
two_years_ago = seq(today, length = 2, by = "-2 year")[2]
getSymbols(all_stocks, from = two_years_ago, to = today)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 3, 45)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,3)
z[j,i] = var_investment
}
}
?rbinom
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
}
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times+1,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] > 15){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
} else {
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
plot(data)
bacteria = function(initial, times, seed){
set.seed(seed)
bacteria_matrix = matrix(0,times+1,1)
bacteria_matrix[1,1] = initial
for(i in seq(from = 1, to = times)){
if(bacteria_matrix[i,1] <= 0){
bacteria_matrix[i+1, 1] = 0
}
if (bacteria_matrix[i,1]> 15 && bacteria_matrix[i,1] > 0){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.5) - 1
}
if(bacteria_matrix[i,1]<= 15 && bacteria_matrix[i,1] > 0){
bacteria_matrix[i+1, 1] = bacteria_matrix[i,1] + 2*rbinom(n = 1,size = 1, prob = 0.4) - 1
}
}
return(bacteria_matrix)
}
data = bacteria(30, 10^3, 1)
plot(data)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,3)
z[j,i] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i+1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 45,1)
z[i,1] = var_investment
}
}
for (i in seq(from = 1, to = 10)){
for (j in seq(from = 1, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", 100,1)
z[i,1] = var_investment
}
}
min(z)
View(z)
for (i in seq(from = 1, to = 10)){
for (j in seq(from = i, to = 10)){
AAPL_ret = na.omit(ClCl(get(all_stocks[i])))
AMZN_ret = na.omit(ClCl(get(all_stocks[j])))
sigma_mat = cov(cbind(AAPL_ret, AMZN_ret))
mu = c(mean(AAPL_ret), mean(AMZN_ret))
omega_star = (sigma_mat[2, 2] - sigma_mat[1, 2])/(sigma_mat[1, 1] + sigma_mat[2, 2] - 2*sigma_mat[1, 2])
mu_investment = omega_star*mu[1] + (1 - omega_star)*mu[2]
var_investment = omega_star^2*sigma_mat[1,1] + (1 - omega_star)^2*sigma_mat[2,2] + 2*omega_star*(1 - omega_star)*sigma_mat[1,2]
z <- matrix("", )
z[i,1] = var_investment
}
}
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
# Reading the csv file from the URL
movies <- read_csv(url, col_names = TRUE, na = "NA")
movies <- movies[!duplicated(movies$title), ]
# Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column) {
column_1 <- df[apply(df[, column], 1, nchar) > 2, ] # Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) # Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name, collapse = ",")))) # Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) # new data frame with the key and values as columns
names(final_df) <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
# Removing the JSON columns
movies_1 <- subset(movies, select = -c(genres, keywords, production_companies, production_countries, spoken_languages))
# Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
View(prod_cntry_df)
?group_by
library(dyplr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(dplyr)
countries <- prod_cntry_df %>%
group_by(production_countries)
View(countries)
countries <- group_by(prod_cntry_df, production_countries)
View(countries)
View(movies_1)
usadf <- df %>%
select(-1,-2,-3,-4,-7,-8,-9,-10,-11,-15) %>%
filter(grepl(pattern = "United States of America", x= production_countries))
usadf <- movies %>%
select(-1,-2,-3,-4,-7,-8,-9,-10,-11,-15) %>%
filter(grepl(pattern = "United States of America", x= production_countries))# %>%
# filter(grepl(pattern = "Romance", x= genres))
View(movies_df)
path <- "/Users/matteofabbri/moovies.csv"
library(readr)
movies <- read_csv("movies.csv")
View(movies)
dfgraph <- movies %<%
select(3,4,12)
library(dyplr)
library(dplyr)
dfgraph <- movies %<%
select(3,4,12)
dfgraph <- movies %>%
select(3,4,12)
dfgraph <- movies %>%
select(3,4,12)%>%
group_by(genre)
View(dfgraph)
dfgraph <- na.omit(movies) %>%
select(3,4,12)%>%
group_by(genre)
View(dfgraph)
dfgraph <- na.omit(movies) %>%
select(3,4,12)
View(dfgraph)
dfgraph <- na.omit(movies) %>%
select(3,4,12)%>%
group_by(genre,year)%>%
summarise(budget=sum(budget))
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
graph1 = dfgraph%>%
ggplot(aes(x=year, y=budget, color = genre)) +
geom_line()
graph1 = dfgraph%>%
ggplot(aes(x=year, y=budget, color = genre)) +
geom_line()
View(graph1)
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
fgraph <- na.omit(movies) %>%
select(3,4,12)%>%
group_by(genre,year)%>%
summarise(budget=sum(budget))
graph1 = dfgraph%>%
ggplot(aes(x=year, y=budget, color = genre)) +
geom_line()
graph1()
graph1
graph1.animation = graph1 +
transition_reveal(year) +
view_follow(fixed_y = TRUE)
gif1 <- animate(graph1.animation, height = 700, width = 900, fps = 60, duration = 15, end_pause = 60, res=100)
library(gganimate)
graph1.animation = graph1 +
transition_reveal(year) +
view_follow(fixed_y = TRUE)
gif1 <- animate(graph1.animation, height = 700, width = 900, fps = 60, duration = 15, end_pause = 60, res=100)
graph1.animation = graph1 +
transition_reveal(year) +
view_follow(fixed_y = TRUE)
gif1 <- animate(graph1.animation, height = 700, width = 900, fps = 20, duration = 15, end_pause = 60, res=100)
graph1
gif1
graph1
dfgraph <- na.omit(movies) %>%
select(3,4,11)%>%
group_by(country,year)%>%
summarise(budget=sum(budget))
dfgraph <- na.omit(movies) %>%
select(3,4,11)%>%
group_by(country,year)%>%
summarise(budget=mean(budget))
library(shiny); runApp('MovieApp.R')
library(shiny); runApp('MovieApp.R')
install.packages(c("ade4", "car", "checkmate", "circular", "cli", "colorspace", "datamods", "dplyr", "DT", "esquisse", "fansi", "FD", "gdata", "geometry", "ggplot2", "glue", "gplots", "gt", "gtools", "haven", "Hmisc", "httr", "knitr", "magrittr", "maptools", "nloptr", "openssl", "ps", "quantreg", "Rcpp", "rlang", "rmarkdown", "roxygen2", "shinyWidgets", "sp", "spatstat.core", "spatstat.data", "spatstat.sparse", "spatstat.utils", "sudoku", "testthat", "tibble", "tinytex", "uuid", "vctrs", "vegan", "xfun", "zoo"))
install.packages(c("ade4", "car", "checkmate", "circular", "cli", "colorspace", "datamods", "dplyr", "DT", "esquisse", "fansi", "FD", "gdata", "geometry", "ggplot2", "glue", "gplots", "gt", "gtools", "haven", "Hmisc", "httr", "knitr", "magrittr", "maptools", "nloptr", "openssl", "ps", "quantreg", "Rcpp", "rlang", "rmarkdown", "roxygen2", "shinyWidgets", "sp", "spatstat.core", "spatstat.data", "spatstat.sparse", "spatstat.utils", "sudoku", "testthat", "tibble", "tinytex", "uuid", "vctrs", "vegan", "xfun", "zoo"))
install.packages(c("broom", "bslib", "callr", "car", "classInt", "cli", "colorspace", "datamods", "DBI", "dbplyr", "devtools", "dplyr", "e1071", "esquisse", "fansi", "farver", "fontawesome", "gdata", "generics", "geometry", "ggdist", "ggplot2", "glue", "gplots", "gt", "gtools", "htmlTable", "htmltools", "httr", "knitr", "latticeExtra", "lme4", "magrittr", "nloptr", "packrat", "pillar", "pkgload", "processx", "proxy", "ps", "quantreg", "R.cache", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "reactable", "rlang", "rmarkdown", "roxygen2", "rsconnect", "s2", "sass", "sf", "shiny", "shinyWidgets", "sm", "sp", "spatstat.core", "spatstat.utils", "stringi", "testthat", "tibble", "tidyverse", "tinytex", "usethis", "vctrs", "xfun"))
install.packages(c("broom", "bslib", "callr", "car", "classInt", "cli", "colorspace", "datamods", "DBI", "dbplyr", "devtools", "dplyr", "e1071", "esquisse", "fansi", "farver", "fontawesome", "gdata", "generics", "geometry", "ggdist", "ggplot2", "glue", "gplots", "gt", "gtools", "htmlTable", "htmltools", "httr", "knitr", "latticeExtra", "lme4", "magrittr", "nloptr", "packrat", "pillar", "pkgload", "processx", "proxy", "ps", "quantreg", "R.cache", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "reactable", "rlang", "rmarkdown", "roxygen2", "rsconnect", "s2", "sass", "sf", "shiny", "shinyWidgets", "sm", "sp", "spatstat.core", "spatstat.utils", "stringi", "testthat", "tibble", "tidyverse", "tinytex", "usethis", "vctrs", "xfun"))
install.packages(c("broom", "bslib", "callr", "car", "classInt", "cli", "colorspace", "datamods", "DBI", "dbplyr", "devtools", "dplyr", "e1071", "esquisse", "fansi", "farver", "fontawesome", "gdata", "generics", "geometry", "ggdist", "ggplot2", "glue", "gplots", "gt", "gtools", "htmlTable", "htmltools", "httr", "knitr", "latticeExtra", "lme4", "magrittr", "nloptr", "packrat", "pillar", "pkgload", "processx", "proxy", "ps", "quantreg", "R.cache", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "reactable", "rlang", "rmarkdown", "roxygen2", "rsconnect", "s2", "sass", "sf", "shiny", "shinyWidgets", "sm", "sp", "spatstat.core", "spatstat.utils", "stringi", "testthat", "tibble", "tidyverse", "tinytex", "usethis", "vctrs", "xfun"))
install.packages(c("cli", "colorspace", "dbplyr", "devtools", "dplyr", "fansi", "farver", "glue", "magrittr", "pillar", "pkgload", "Rcpp", "rlang", "stringi", "tibble", "vctrs"))
install.packages(c("cli", "colorspace", "dbplyr", "devtools", "dplyr", "fansi", "farver", "glue", "magrittr", "pillar", "pkgload", "Rcpp", "rlang", "stringi", "tibble", "vctrs"))
install.packages(c("broom", "callr", "cli", "colorspace", "datamods", "dbplyr", "devtools", "distributional", "dplyr", "DT", "dtplyr", "esquisse", "evaluate", "fansi", "farver", "forcats", "gert", "ggforce", "glue", "googlesheets4", "gt", "gtable", "haven", "Hmisc", "hms", "httr", "knitr", "magrittr", "modelr", "palmerpenguins", "pillar", "pkgload", "Rcpp", "readxl", "reprex", "rlang", "rmarkdown", "rstudioapi", "rversions", "rvest", "scales", "scico", "shinyWidgets", "stringi", "stringr", "tibble", "tinytex", "tweenr", "vctrs", "viridisLite", "xfun"))
install.packages(c("cli", "colorspace", "dbplyr", "desc", "devtools", "dplyr", "fansi", "farver", "gargle", "gert", "gganimate", "gh", "gitcreds", "glue", "googlesheets4", "gt", "httpuv", "lifecycle", "lpSolve", "magrittr", "MatrixModels", "pillar", "pkgload", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "tweenr", "vctrs", "zip"))
install.packages(c("cli", "colorspace", "dbplyr", "desc", "devtools", "dplyr", "fansi", "farver", "gargle", "gert", "gganimate", "gh", "gitcreds", "glue", "googlesheets4", "gt", "httpuv", "lifecycle", "lpSolve", "magrittr", "MatrixModels", "pillar", "pkgload", "Rcpp", "rlang", "stringi", "tibble", "tidyr", "tweenr", "vctrs", "zip"))
setwd("~/")
install.packages(c("dbplyr", "dplyr", "magrittr", "tibble"))
get.wd
getwd()
setwd("C:/Users/lucas_/Documents/Masters Coding/DMBA-R-datasets")
amtrak.data <- read.csv("Amtrak.csv")
View(amtrak.data)
is.integer(3)
summary(amtrak.data)
#There is a time series function :
start_date = min(amtrak.data$Month)
time_series_data <- ts(data = amtrak.data$Ridership, start = start_date, end = end_date)
#How to do a linear Regression
reg <- lm(mpg~., data=mtcars)
#lm means linear model, mpg is the Y (independent) variable in the data set mtcars.
#The ~. means regressed by all variables
summary(reg)
#summary of the regression shows the P values of each coefficient, which allows us
#to determine whether they are significant. None of them are at 5% (no significant
#impact of the other variables on miles/gallon)
#---------------------------------------------------------------------------------------
#Time Series Analysis
setwd("C:/Users/lucas_/Documents/Masters Coding/DMBA-R-datasets")
amtrak.data <- read.csv("Amtrak.csv")
summary(amtrak.data)
#Just time and  number of train users at each time
#There is a time series function :
start_date = min(amtrak.data$Month)
end_date = max(amtrak.data$Month)
time_series_data <- ts(data = amtrak.data$Ridership, start = start_date, end = end_date)
View(amtrak.data)
time_series_data <- ts(data = amtrak.data$Ridership, start = c(1991,1), end = c(2003,1))
time_series_data
time_series_data <- ts(data = amtrak.data$Ridership, start = c(1991,1), end = c(2003,1), frequency = 12)
plot(time_series_data)
time_series_data <- ts(data = amtrak.data$Ridership, start = c(1991,1), end = c(2003,1), frequency = 4)
#Notice that the format of the date is : c(year, month) . Also frequency = 12 since 12 months
time_series_data
time_series_data <- ts(data = amtrak.data$Ridership, start = c(1991,1), end = c(2003,1), frequency = 12)
plot(time_series_data,)
plot(time_series_data)
plot(time_series_data,ylim=c(1400,2200))
plot(time_series_data,ylim=c(1300,2200))
install.packages("forecast")
library("forecast")
#We arbitrarily chose 36 observations for variation set (around 20%),
#meaning 123 observations for training set (around 80%)
n_obs_train = 123
train.ts <- window(time_series_data, start=c(1991,1), end =c(1991,n_obs_train))
#window function just cuts a certain part of data (same as creating new df with desired data)
#instead of calculating the right final data, we just take the 123rd observation from 1991 = march 2001
install.packages("gganimate")
