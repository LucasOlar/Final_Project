full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#colnames(movies_df)
#We want to create a function that filters based on : 2 genres, vote_average, popularity, 2 release_date, runtime, original language, spoken languages
#show all the possible original languages
# list_languages <- movies_df[!duplicated(movies_df$original_language), ]
# list_languages = list_languages %>%
#   select(original_language)
#unique(list_languages$original_language)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we simply take all the possible genres of movies
# list_genres <- unlist(strsplit(movies_df$genres,","))
# list_genres <- list_genres[!duplicated(list_genres)]
# print(list_genres)
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(original_language == original_language_input)
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2008-06-15"))
date_after_input <- as.Date(c("2007-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"     #between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
summary(movies_df$runtime)
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#colnames(movies_df)
#We want to create a function that filters based on : 2 genres, vote_average, popularity, 2 release_date, runtime, original language, spoken languages
#show all the possible original languages
# list_languages <- movies_df[!duplicated(movies_df$original_language), ]
# list_languages = list_languages %>%
#   select(original_language)
#unique(list_languages$original_language)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we simply take all the possible genres of movies
# list_genres <- unlist(strsplit(movies_df$genres,","))
# list_genres <- list_genres[!duplicated(list_genres)]
# print(list_genres)
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(original_language == original_language_input)
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2008-06-15"))
date_after_input <- as.Date(c("2007-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"     #between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
summary(movies_df$runtime)
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#colnames(movies_df)
#We want to create a function that filters based on : 2 genres, vote_average, popularity, 2 release_date, runtime, original language, spoken languages
#show all the possible original languages
# list_languages <- movies_df[!duplicated(movies_df$original_language), ]
# list_languages = list_languages %>%
#   select(original_language)
#unique(list_languages$original_language)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we simply take all the possible genres of movies
# list_genres <- unlist(strsplit(movies_df$genres,","))
# list_genres <- list_genres[!duplicated(list_genres)]
# print(list_genres)
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language))
View(movies_recommendation)
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2011-06-15"))
date_after_input <- as.Date(c("2007-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"     #between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
summary(movies_df$runtime)
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#colnames(movies_df)
#We want to create a function that filters based on : 2 genres, vote_average, popularity, 2 release_date, runtime, original language, spoken languages
#show all the possible original languages
# list_languages <- movies_df[!duplicated(movies_df$original_language), ]
# list_languages = list_languages %>%
#   select(original_language)
#unique(list_languages$original_language)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we simply take all the possible genres of movies
# list_genres <- unlist(strsplit(movies_df$genres,","))
# list_genres <- list_genres[!duplicated(list_genres)]
# print(list_genres)
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language))
list_spoken_languages <- movies_df[!duplicated(movies_df$spoken_language), ]
list_spoken_languages = list_spoken_languages %>%
select(spoken_language)
unique(list_spoken_languages$spoken_language)
list_spoken_languages <- movies_df[!duplicated(movies_df$spoken_language), ]
list_spoken_languages <- movies_df[!duplicated(movies_df$spoken_languages), ]
list_spoken_languages = list_spoken_languages %>%
select(spoken_languages)
unique(list_spoken_languages$spoken_languages)
list_spoken_languages <- unlist(strsplit(movies_df$spoken_languages,","))
list_spoken_languages <- list_spoken_languages[!duplicated(list_spoken_languages)]
print(list_spoken_languages)
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2011-06-15"))
date_after_input <- as.Date(c("2007-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"
#between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
spoken_languages_input <- English
#between : "English" "Español" "Français" "Italiano" "Deutsch""Türkçe" "ελληνικά" "普通话" "ภาษาไทย" "Íslenska" "Pусский"
#          "svenska" "Română" "日本語" "Latin" "हिन्दी"   "Português"  "فارسی"          "اردو"             "العربية"  "Český"     "广州话 / 廣州話"  "한국어/조선말"    "Norsk"
#          "தமிழ்"    "" "עִבְרִית"            "Dansk"            "Nederlands"       "Afrikaans"        "Gaeilge"          "Somali"           "suomi"            "Kiswahili"
#          "български език"   "Tiếng Việt"       "Magyar"           "Український"      "Esperanto"        "Polski"           "ਪੰਜਾਬੀ"            "Eesti"            "shqip"            "Srpski"
#          "Bosanski"         "Hrvatski"         "Slovenčina"       "қазақ"            "తెలుగు"            "Cymraeg"          "Wolof"            "isiZulu"          "پښتو"             "No Language"
#          "Galego"           "ქართული"          "বাংলা"            "Català"            "Bahasa indonesia" "Bamanankan"       "Slovenščina"
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#show all the possible spoken languages
list_spoken_languages <- unlist(strsplit(movies_df$spoken_languages,","))
list_spoken_languages <- list_spoken_languages[!duplicated(list_spoken_languages)]
print(list_spoken_languages)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language)) %>%
filter(grepl(pattern = spoken_languages_input, x = spoken_languages))
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2011-06-15"))
date_after_input <- as.Date(c("2007-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"
#between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
spoken_languages_input <- "English"
#between : "English" "Español" "Français" "Italiano" "Deutsch""Türkçe" "ελληνικά" "普通话" "ภาษาไทย" "Íslenska" "Pусский"
#          "svenska" "Română" "日本語" "Latin" "हिन्दी"   "Português"  "فارسی"          "اردو"             "العربية"  "Český"     "广州话 / 廣州話"  "한국어/조선말"    "Norsk"
#          "தமிழ்"    "" "עִבְרִית"            "Dansk"            "Nederlands"       "Afrikaans"        "Gaeilge"          "Somali"           "suomi"            "Kiswahili"
#          "български език"   "Tiếng Việt"       "Magyar"           "Український"      "Esperanto"        "Polski"           "ਪੰਜਾਬੀ"            "Eesti"            "shqip"            "Srpski"
#          "Bosanski"         "Hrvatski"         "Slovenčina"       "қазақ"            "తెలుగు"            "Cymraeg"          "Wolof"            "isiZulu"          "پښتو"             "No Language"
#          "Galego"           "ქართული"          "বাংলা"            "Català"            "Bahasa indonesia" "Bamanankan"       "Slovenščina"
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#show all the possible spoken languages
list_spoken_languages <- unlist(strsplit(movies_df$spoken_languages,","))
list_spoken_languages <- list_spoken_languages[!duplicated(list_spoken_languages)]
print(list_spoken_languages)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language)) %>%
filter(grepl(pattern = spoken_languages_input, x = spoken_languages))
genre_1 = "All"             #between : "Action" "Adventure" "Fantasy" "Science Fiction" "Crime" "Drama" "Thriller" "Animation" "Family"
#  "Western" "Comedy" "Romance" "Horror" "Mystery" "History" "War" "Music" "Documentary" "Foreign" "TV Movie"
genre_2 = "Action"
vote_input = 5              #between 0 and 10
popularity_input = 10       #between 0 and 500 (to simplify since only 3 movies above 500)
date_before_input <- as.Date(c("2015-06-15"))
date_after_input <- as.Date(c("1949-06-10"))
runtime_input <- 190        #between 0 and 340
original_language_input <- "es"
#between : "en" "ja" "fr" "zh" "es" "de" "hi" "ru" "ko" "te" "cn" "it" "nl" "ta" "sv" "th" "da" "xx" "hu"
#   "cs" "pt" "is" "tr" "nb" "af" "pl" "he" "ar" "vi" "ky" "id" "ro" "fa" "no" "sl" "ps" "el"
spoken_languages_input <- "English"
#between : "English" "Español" "Français" "Italiano" "Deutsch""Türkçe" "ελληνικά" "普通话" "ภาษาไทย" "Íslenska" "Pусский"
#          "svenska" "Română" "日本語" "Latin" "हिन्दी"   "Português"  "فارسی"          "اردو"             "العربية"  "Český"     "广州话 / 廣州話"  "한국어/조선말"    "Norsk"
#          "தமிழ்"    "" "עִבְרִית"            "Dansk"            "Nederlands"       "Afrikaans"        "Gaeilge"          "Somali"           "suomi"            "Kiswahili"
#          "български език"   "Tiếng Việt"       "Magyar"           "Український"      "Esperanto"        "Polski"           "ਪੰਜਾਬੀ"            "Eesti"            "shqip"            "Srpski"
#          "Bosanski"         "Hrvatski"         "Slovenčina"       "қазақ"            "తెలుగు"            "Cymraeg"          "Wolof"            "isiZulu"          "پښتو"             "No Language"
#          "Galego"           "ქართული"          "বাংলা"            "Català"            "Bahasa indonesia" "Bamanankan"       "Slovenščina"
url <- "https://raw.githubusercontent.com/rengalv/Movies-Data-Analysis-Grab-a-Popcorn/master/tmdb_5000_movies.csv"
#Reading the csv file from the URL
movies <- read_csv(url,col_names = TRUE,na = "NA")
movies <- movies[!duplicated(movies$title), ]
#Takes in the dataframe and column name to be transformed
json_to_df <- function(df, column){
column_1 <- df[apply(df[,column],1,nchar)>2,]  #Checks if there is an entry
list_1 <- lapply(column_1[[column]], fromJSON) #Converts the JSON to a list
values <- data.frame(unlist(lapply(list_1, function(x) paste(x$name,collapse = ",")))) #Collapsing all the values of the list as a key value pair
final_df <- cbind(column_1$id, column_1$title, values) #new data frame with the key and values a s columns
names(final_df)  <- c("id", "title", column)
return(final_df)
}
genres_df <- json_to_df(movies, "genres")
keywords_df <- json_to_df(movies, "keywords")
prod_cntry_df <- json_to_df(movies, "production_countries")
prod_cmpny_df <- json_to_df(movies, "production_companies")
spoken_lang_df <- json_to_df(movies, "spoken_languages")
#Subset the movies dataframe by removing the JSON columns
movies_1 <- subset(movies, select =  -c(genres,keywords,production_companies, production_countries,spoken_languages))
#Join the columns from all the generated dataframes from previous step
movies_df <- movies_1 %>%
full_join(genres_df, by = c("id", "title")) %>%
full_join(keywords_df, by = c("id", "title")) %>%
full_join(prod_cntry_df, by = c("id", "title")) %>%
full_join(prod_cmpny_df, by = c("id", "title")) %>%
full_join(spoken_lang_df, by = c("id", "title"))
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#show all the possible spoken languages
list_spoken_languages <- unlist(strsplit(movies_df$spoken_languages,","))
list_spoken_languages <- list_spoken_languages[!duplicated(list_spoken_languages)]
print(list_spoken_languages)
#Here we say if user chooses all original languages, then we will pick all the possible languages
if(original_language_input == "All"){
original_language_input <- ""
}
#Here we say if user chooses all genres, then we will pick all the possible genres
if(genre_1 == "All" | genre_2 == "All"){
genre_1 <- ""
genre_2 <- ""
}
movies_recommendation = movies_df %>%
filter(status == "Released") %>%
filter(grepl(pattern = genre_1, x = genres)) %>%
filter(grepl(pattern = genre_2, x = genres)) %>%
filter(vote_average >= vote_input) %>%
filter(popularity >= popularity_input) %>%
filter(release_date <= date_before_input) %>%
filter(release_date >= date_after_input) %>%
filter(runtime <= runtime_input) %>%
filter(grepl(pattern = original_language_input, x = original_language)) %>%
filter(grepl(pattern = spoken_languages_input, x = spoken_languages))
shiny::runApp('MovieSorter')
runApp('MovieSorter')
library(shiny)
source(file = "data-finalproject.R", local = T)
ui <- fluidPage(
# Application title
titlePanel("EL PELIROSTER"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("inputId", "GENRES", "ACTION - ADVENTURE", selected = NULL, multiple = FALSE, selectize = TRUE, width = NULL, size = NULL),
selectInput("inputId", "ACTORS","MEGAN FOX", selected = NULL, multiple = FALSE, selectize = TRUE, width = NULL, size = NULL),
selectInput("inputId", "YEAR","2008", selected = NULL, multiple = FALSE, selectize = TRUE, width = NULL, size = NULL),
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
tabPanel("PELIROSTED", plotOutput("peli")),
tabPanel("RANDOMIZER", plotOutput("rando")),
),
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
?selectInput
?selectInput
runApp('MovieSorter')
getwd()
runApp('MovieSorter')
runApp('MovieSorter')
runApp('MovieSorter')
runApp('MovieSorter')
